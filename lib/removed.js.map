{"version":3,"sources":["../src/lib/removed.js"],"names":["factoryExistedGraph","ParentClassGraph","ExistedGraph","link","callback","context","hasOwnProperty","config","aliases","selector","modifier","assign","update","_selector","undefined","event","oldLink","newLink","arguments","factoryNonExistedGraph","NonExistedGraph","Error"],"mappings":"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","file":"removed.js","sourcesContent":["import lodash from 'lodash';\r\n\r\n/**\r\n * This method allows you to use ExistedGraph class to its inheritance chain.\r\n *\r\n * @param {Class} ParentClassGraph\r\n * @return {Class} Graph\r\n * @description `import { factoryExistedGraph } from 'ancient-graph-removed';`\r\n */\r\nfunction factoryExistedGraph(ParentClassGraph) {\r\n  \r\n  /**\r\n   * Class to inherit. It must be used after adapting to the database..\r\n   * Distorts graph logic so that the use of two-stage removal.\r\n   * It is a public, not a removed part of the graph.\r\n   * \r\n   * @class\r\n   * @description `var ExistedGraph = factoryExistedGraph(Graph);`\r\n   */\r\n  class ExistedGraph extends ParentClassGraph {\r\n    \r\n    /**\r\n     * Standard graph insert, but with locked removed field.\r\n     * \r\n     * @param {Link} link\r\n     * @param {ExistedGraph~insertCallback} [callback]\r\n     * @param {Object} [context]\r\n     * @return {string} [id]\r\n     */\r\n    insert(link, callback, context) {\r\n      if (link.hasOwnProperty(this.config.aliases['removed'])) delete link[this.config.aliases['removed']];\r\n      return super.insert(link, callback, context);\r\n    }\r\n    \r\n    /**\r\n     * Optional callback. If present, called with an error object as the first argument and, if no error, the unique id of inserted link as the second.\r\n     *\r\n     * @callback ExistedGraph~insertCallback\r\n     * @param {Error} [error]\r\n     * @param {string} [id]\r\n     */\r\n    \r\n    /**\r\n     * Standard graph update, but with locked removed field in modifier, if context.removed is not true.\r\n     * \r\n     * @param {string|LinkSelector} selector\r\n     * @param {LinkModifier} modifier\r\n     * @param {ExistedGraph~updateCallback} [callback]\r\n     * @param {Object} [context]\r\n     * @return {number} [count]\r\n     */\r\n    update(selector, modifier, callback, context) {\r\n      if (modifier.hasOwnProperty(this.config.aliases['removed'])) {\r\n        delete modifier[this.config.aliases['removed']];\r\n      }\r\n      if (context) {\r\n        if (context.modifier) {\r\n          modifier = lodash.assign(modifier, context.modifier);\r\n        }\r\n      }\r\n      return super.update(selector, modifier, callback, context);\r\n    }\r\n    \r\n    /**\r\n     * Optional callback. If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\r\n     *\r\n     * @callback ExistedGraph~updateCallback\r\n     * @param {Error} [error]\r\n     * @param {number} [count]\r\n     */\r\n    \r\n    /**\r\n     * Instead of removing the changes remove field to true.\r\n     * \r\n     * @param {string|LinkSelector} selector\r\n     * @param {ExistedGraph~removeCallback} [callback]\r\n     * @param {Object} [context]\r\n     * @param {Object} [context.modifier] - update modifier\r\n     */\r\n    remove(selector, callback, context) {\r\n      if (!context) var context = {};\r\n      if (!context.modifier) context.modifier = {};\r\n      context.modifier[this.config.aliases['removed']] = true;\r\n      this.update(selector, {}, callback, context);\r\n    }\r\n    \r\n    /**\r\n     * Optional callback. If present, called with an error object as the first argument.\r\n     *\r\n     * @callback ExistedGraph~removeCallback\r\n     * @param {Error} [error]\r\n     * @param {number} [count]\r\n     */\r\n    \r\n    /**\r\n     * Standard graph query, but visible only links where removed is undefined.\r\n     * \r\n     * @param {string|LinkSelector} selector\r\n     * @return {*} query\r\n     */\r\n    query(selector) {\r\n      var _selector;\r\n      if (typeof(selector) != 'object') {\r\n        _selector = {};\r\n        if (typeof(selector) != 'undefined') {\r\n          _selector[this.config.aliases['id']] = selector;\r\n        }\r\n      }\r\n      else _selector = selector;\r\n      _selector[this.config.aliases['removed']] = undefined;\r\n      return super.query(_selector);\r\n    }\r\n    \r\n    /**\r\n     * Standard graph on method, but considering substitution the remove to the update.\r\n     * \r\n     * @param {string} event - name\r\n     * @param {ExistedGraphonCallback} callback\r\n     */\r\n    on(event, callback) {\r\n      if (event == 'insert') super.on(event, callback);\r\n      if (event == 'update') {\r\n        super.on('update', function(oldLink, newLink, context) {\r\n          if (!newLink[this.config.aliases['removed']]) {\r\n            callback(...arguments);\r\n          }\r\n        });\r\n      }\r\n      if (event == 'remove') {\r\n        super.on('update', function(oldLink, newLink, context) {\r\n          if (newLink[this.config.aliases['removed']]) {\r\n            callback(newLink, undefined, context);\r\n          }\r\n        });\r\n      }\r\n      if (event == 'link') super.on(event, callback);\r\n      if (event == 'unlink') super.on(event, callback);\r\n    }\r\n    \r\n    /**\r\n     * @callback ExistedGraph~onCallback\r\n     * @param {Link} [oldLink] - can be undefined on link and insert events\r\n     * @param {Link} [newLink] - can be undefined on unlink and remove events\r\n     * @param {Object} [context] - additional app information, such as context.userId\r\n     */\r\n  };\r\n  \r\n  return ExistedGraph;\r\n}\r\n\r\n/**\r\n * This method allows you to use NonExistedGraph class to its inheritance chain.\r\n *\r\n * @param {Class} ParentClassGraph\r\n * @return {Class} Graph\r\n * @description `import { factoryNonExistedGraph } from 'ancient-graph-removed';`\r\n */\r\nfunction factoryNonExistedGraph(ParentClassGraph) {\r\n  \r\n  /**\r\n   * Class to inherit. It must be used after adapting to the database..\r\n   * Distorts graph logic so that the use of two-stage removal.\r\n   * It is a private, a removed part of the graph.\r\n   * \r\n   * @class\r\n   * @description `var NonExistedGraph = factoryNonExistedGraph(Graph);`\r\n   */\r\n  class NonExistedGraph extends ParentClassGraph {\r\n    \r\n    /**\r\n     * Illegal operation!\r\n     */\r\n    insert() { throw new Error('Illegal operation.'); }\r\n    \r\n    /**\r\n     * Standard graph update, but with locked removed field in modifier.\r\n     * \r\n     * @param {string|LinkSelector} selector\r\n     * @param {LinkModifier} modifier\r\n     * @param {ExistedGraph~updateCallback} [callback]\r\n     * @param {Object} [context]\r\n     * @return {number} [count]\r\n     */\r\n    update(selector, modifier, callback, context) {\r\n      if (modifier.hasOwnProperty(this.config.aliases['removed'])) delete modifier[this.config.aliases['removed']];\r\n      return super.update(selector, modifier, callback, context);\r\n    }\r\n    \r\n    /**\r\n     * Standard graph query, but visible only links where removed is undefined.\r\n     * \r\n     * @param {string|LinkSelector} selector\r\n     * @return {*} query\r\n     */\r\n    query(selector) {\r\n      var _selector;\r\n      if (typeof(selector) != 'object') {\r\n        _selector = {};\r\n        if (typeof(selector) != 'undefined') {\r\n          _selector[this.config.aliases['id']] = selector;\r\n        }\r\n      }\r\n      else _selector = selector;\r\n      _selector[this.config.aliases['removed']] = true;\r\n      return super.query(_selector);\r\n    }\r\n    \r\n    /**\r\n     * Standard graph on method, but considering substitution the remove to the update.\r\n     * \r\n     * @param {string} event - name\r\n     * @param {ExistedGraphonCallback} callback\r\n     */\r\n    on(event, callback) {\r\n      if (event == 'insert') {\r\n        // Impossible on object adapter of graph, but in real db\r\n        super.on('update', function(oldLink, newLink, context) {\r\n          if (!oldLink[this.config.aliases['removed']] && newLink[this.config.aliases['removed']]) {\r\n            callback(undefined, newLink, context);\r\n          }\r\n        });\r\n      }\r\n      if (event == 'update') {\r\n        super.on('update', function(oldLink, newLink, context) {\r\n          if (oldLink[this.config.aliases['removed']] && newLink[this.config.aliases['removed']]) {\r\n            callback(...arguments);\r\n          }\r\n        });\r\n      }\r\n      if (event == 'remove') super.on(event, callback);\r\n      if (event == 'link') super.on(event, callback);\r\n      if (event == 'unlink') super.on(event, callback);\r\n    }\r\n    \r\n    /**\r\n     * @callback ExistedGraph~onCallback\r\n     * @param {Link} [oldLink] - can be undefined on link and insert events\r\n     * @param {Link} [newLink] - can be undefined on unlink and remove events\r\n     * @param {Object} [context] - additional app information, such as context.userId\r\n     */\r\n  };\r\n  \r\n  return NonExistedGraph;\r\n}\r\n\r\nexport { factoryExistedGraph, factoryNonExistedGraph };"]}