{"version":3,"sources":["../src/lib/removed.js"],"names":["factoryExistedGraph","ParentClassGraph","ExistedGraph","link","callback","context","hasOwnProperty","removed","selector","modifier","assign","update","_selector","id","undefined","event","oldLink","newLink","arguments","factoryNonExistedGraph","NonExistedGraph","Error"],"mappings":"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","file":"removed.js","sourcesContent":["import lodash from 'lodash';\n\n/**\n * This method allows you to use ExistedGraph class to its inheritance chain.\n *\n * @param {Class} ParentClassGraph\n * @return {Class} Graph\n * @description `import { factoryExistedGraph } from 'ancient-graph-removed';`\n */\nfunction factoryExistedGraph(ParentClassGraph) {\n  \n  /**\n   * Class to inherit. It must be used after adapting to the database..\n   * Distorts graph logic so that the use of two-stage removal.\n   * It is a public, not a removed part of the graph.\n   * \n   * @class\n   * @description `var ExistedGraph = factoryExistedGraph(Graph);`\n   */\n  class ExistedGraph extends ParentClassGraph {\n    \n    /**\n     * Standard graph insert, but with locked removed field.\n     * \n     * @param {Link} link\n     * @param {ExistedGraph~insertCallback} [callback]\n     * @param {Object} [context]\n     * @return {string} [id]\n     */\n    insert(link, callback, context) {\n      if (link.hasOwnProperty('removed')) delete link.removed;\n      return super.insert(link, callback, context);\n    }\n    \n    /**\n     * Optional callback. If present, called with an error object as the first argument and, if no error, the unique id of inserted link as the second.\n     *\n     * @callback ExistedGraph~insertCallback\n     * @param {Error} [error]\n     * @param {string} [id]\n     */\n    \n    /**\n     * Standard graph update, but with locked removed field in modifier, if context.removed is not true.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {LinkModifier} modifier\n     * @param {ExistedGraph~updateCallback} [callback]\n     * @param {Object} [context]\n     * @return {number} [count]\n     */\n    update(selector, modifier, callback, context) {\n      if (modifier.hasOwnProperty('removed')) {\n        delete modifier.removed;\n      }\n      if (context) {\n        if (context.modifier) {\n          modifier = lodash.assign(modifier, context.modifier);\n        }\n      }\n      return super.update(selector, modifier, callback, context);\n    }\n    \n    /**\n     * Optional callback. If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n     *\n     * @callback ExistedGraph~updateCallback\n     * @param {Error} [error]\n     * @param {number} [count]\n     */\n    \n    /**\n     * Instead of removing the changes remove field to true.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {ExistedGraph~removeCallback} [callback]\n     * @param {Object} [context]\n     * @param {Object} [context.modifier] - update modifier\n     */\n    remove(selector, callback, context) {\n      if (!context) var context = {};\n      if (!context.modifier) context.modifier = {};\n      context.modifier.removed = true;\n      this.update(selector, {}, callback, context);\n    }\n    \n    /**\n     * Optional callback. If present, called with an error object as the first argument.\n     *\n     * @callback ExistedGraph~removeCallback\n     * @param {Error} [error]\n     * @param {number} [count]\n     */\n    \n    /**\n     * Standard graph query, but visible only links where removed is undefined.\n     * \n     * @param {string|LinkSelector} selector\n     * @return {*} query\n     */\n    query(selector) {\n      var _selector;\n      if (typeof(selector) != 'object') {\n        _selector = {};\n        if (typeof(selector) != 'undefined') {\n          _selector.id = selector;\n        }\n      }\n      else _selector = selector;\n      _selector.removed = undefined;\n      return super.query(_selector);\n    }\n    \n    /**\n     * Standard graph on method, but considering substitution the remove to the update.\n     * \n     * @param {string} event - name\n     * @param {ExistedGraphonCallback} callback\n     */\n    on(event, callback) {\n      if (event == 'insert') super.on(event, callback);\n      if (event == 'update') {\n        super.on('update', function(oldLink, newLink, context) {\n          if (!newLink.removed) {\n            callback(...arguments);\n          }\n        });\n      }\n      if (event == 'remove') {\n        super.on('update', function(oldLink, newLink, context) {\n          if (newLink.removed) {\n            callback(newLink, undefined, context);\n          }\n        });\n      }\n      if (event == 'link') super.on(event, callback);\n      if (event == 'unlink') super.on(event, callback);\n    }\n    \n    /**\n     * @callback ExistedGraph~onCallback\n     * @param {Link} [oldLink] - can be undefined on link and insert events\n     * @param {Link} [newLink] - can be undefined on unlink and remove events\n     * @param {Object} [context] - additional app information, such as context.userId\n     */\n  };\n  \n  return ExistedGraph;\n}\n\n/**\n * This method allows you to use NonExistedGraph class to its inheritance chain.\n *\n * @param {Class} ParentClassGraph\n * @return {Class} Graph\n * @description `import { factoryNonExistedGraph } from 'ancient-graph-removed';`\n */\nfunction factoryNonExistedGraph(ParentClassGraph) {\n  \n  /**\n   * Class to inherit. It must be used after adapting to the database..\n   * Distorts graph logic so that the use of two-stage removal.\n   * It is a private, a removed part of the graph.\n   * \n   * @class\n   * @description `var NonExistedGraph = factoryNonExistedGraph(Graph);`\n   */\n  class NonExistedGraph extends ParentClassGraph {\n    \n    /**\n     * Illegal operation!\n     */\n    insert() { throw new Error('Illegal operation.'); }\n    \n    /**\n     * Standard graph update, but with locked removed field in modifier.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {LinkModifier} modifier\n     * @param {ExistedGraph~updateCallback} [callback]\n     * @param {Object} [context]\n     * @return {number} [count]\n     */\n    update(selector, modifier, callback, context) {\n      if (modifier.hasOwnProperty('removed')) delete modifier.removed;\n      return super.update(selector, modifier, callback, context);\n    }\n    \n    /**\n     * Standard graph query, but visible only links where removed is undefined.\n     * \n     * @param {string|LinkSelector} selector\n     * @return {*} query\n     */\n    query(selector) {\n      var _selector;\n      if (typeof(selector) != 'object') {\n        _selector = {};\n        if (typeof(selector) != 'undefined') {\n          _selector.id = selector;\n        }\n      }\n      else _selector = selector;\n      _selector.removed = true;\n      return super.query(_selector);\n    }\n    \n    /**\n     * Standard graph on method, but considering substitution the remove to the update.\n     * \n     * @param {string} event - name\n     * @param {ExistedGraphonCallback} callback\n     */\n    on(event, callback) {\n      if (event == 'insert') {\n        // Impossible on object adapter of graph, but in real db\n        super.on('update', function(oldLink, newLink, context) {\n          if (!oldLink.removed && newLink.removed) {\n            callback(undefined, newLink, context);\n          }\n        });\n      }\n      if (event == 'update') {\n        super.on('update', function(oldLink, newLink, context) {\n          if (oldLink.removed && newLink.removed) {\n            callback(...arguments);\n          }\n        });\n      }\n      if (event == 'remove') super.on(event, callback);\n      if (event == 'link') super.on(event, callback);\n      if (event == 'unlink') super.on(event, callback);\n    }\n    \n    /**\n     * @callback ExistedGraph~onCallback\n     * @param {Link} [oldLink] - can be undefined on link and insert events\n     * @param {Link} [newLink] - can be undefined on unlink and remove events\n     * @param {Object} [context] - additional app information, such as context.userId\n     */\n  };\n  \n  return NonExistedGraph;\n}\n\nexport { factoryExistedGraph, factoryNonExistedGraph };"]}