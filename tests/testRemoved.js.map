{"version":3,"sources":["../src/tests/testRemoved.js"],"names":["testRemoved","generateGraphs","ids","it","done","existedGraph","nonExistedGraph","insert","source","error","id1","ifError","fetch","undefined","results","deepEqual","id","remove","count","removed"],"mappings":";;;;;kBAEwBA,W;;AAFxB;;AAEe,SAASA,WAAT,CAAqBC,cAArB,EAAqCC,GAArC,EAA0C;AACvDC,KAAG,+BAAH,EAAoC,UAASC,IAAT,EAAe;AAAA,0BACTH,gBADS;AAAA,QAC3CI,YAD2C,mBAC3CA,YAD2C;AAAA,QAC7BC,eAD6B,mBAC7BA,eAD6B;;AAEjDD,iBAAaE,MAAb,CAAoB,EAAEC,QAAQN,IAAI,CAAJ,CAAV,EAApB,EAAwC,UAASO,KAAT,EAAgBC,GAAhB,EAAqB;AAC3D,mBAAOC,OAAP,CAAeF,KAAf;AACAJ,mBAAaO,KAAb,CAAmBC,SAAnB,EAA8BA,SAA9B,EAAyC,UAACJ,KAAD,EAAQK,OAAR,EAAoB;AAC3D,qBAAOH,OAAP,CAAeF,KAAf;AACA,qBAAOM,SAAP,CAAiBD,OAAjB,EAA0B,CACxB,EAAEE,IAAIN,GAAN,EAAWF,QAAQN,IAAI,CAAJ,CAAnB,EADwB,CAA1B;AAGAI,wBAAgBM,KAAhB,CAAsBC,SAAtB,EAAiCA,SAAjC,EAA4C,UAACJ,KAAD,EAAQK,OAAR,EAAoB;AAC9D,uBAAOH,OAAP,CAAeF,KAAf;AACA,uBAAOM,SAAP,CAAiBD,OAAjB,EAA0B,EAA1B;AACAT,uBAAaY,MAAb,CAAoBP,GAApB,EAAyB,UAACD,KAAD,EAAQS,KAAR,EAAkB;AACzC,yBAAOP,OAAP,CAAeF,KAAf;AACAJ,yBAAaO,KAAb,CAAmBC,SAAnB,EAA8BA,SAA9B,EAAyC,UAACJ,KAAD,EAAQK,OAAR,EAAoB;AAC3D,2BAAOH,OAAP,CAAeF,KAAf;AACA,2BAAOM,SAAP,CAAiBD,OAAjB,EAA0B,EAA1B;AACAR,8BAAgBM,KAAhB,CAAsBC,SAAtB,EAAiCA,SAAjC,EAA4C,UAACJ,KAAD,EAAQK,OAAR,EAAoB;AAC9D,6BAAOH,OAAP,CAAeF,KAAf;AACA,6BAAOM,SAAP,CAAiBD,OAAjB,EAA0B,CACxB,EAAEE,IAAIN,GAAN,EAAWF,QAAQN,IAAI,CAAJ,CAAnB,EAA2BiB,SAAS,IAApC,EADwB,CAA1B;AAGAf;AACD,eAND;AAOD,aAVD;AAWD,WAbD;AAcD,SAjBD;AAkBD,OAvBD;AAwBD,KA1BD;AA2BD,GA7BD;AA8BD","file":"testRemoved.js","sourcesContent":["import { assert } from 'chai';\r\n\r\nexport default function testRemoved(generateGraphs, ids) {\r\n  it('#remove #fetch #remove #fetch', function(done) {\r\n    var { existedGraph, nonExistedGraph } = generateGraphs();\r\n    existedGraph.insert({ source: ids[0] }, function(error, id1) {\r\n      assert.ifError(error);\r\n      existedGraph.fetch(undefined, undefined, (error, results) => {\r\n        assert.ifError(error);\r\n        assert.deepEqual(results, [\r\n          { id: id1, source: ids[0] }\r\n        ]);\r\n        nonExistedGraph.fetch(undefined, undefined, (error, results) => {\r\n          assert.ifError(error);\r\n          assert.deepEqual(results, []);\r\n          existedGraph.remove(id1, (error, count) => {\r\n            assert.ifError(error);\r\n            existedGraph.fetch(undefined, undefined, (error, results) => {\r\n              assert.ifError(error);\r\n              assert.deepEqual(results, []);\r\n              nonExistedGraph.fetch(undefined, undefined, (error, results) => {\r\n                assert.ifError(error);\r\n                assert.deepEqual(results, [\r\n                  { id: id1, source: ids[0], removed: true }\r\n                ]);\r\n                done();\r\n              });\r\n            });\r\n          });\r\n        });\r\n      });\r\n    });\r\n  });\r\n};"]}